{"ast":null,"code":"var _jsxFileName = \"/Users/denipersson/Documents/GitHub/front-end-webapp/src/Presenter/RecordPresenter.tsx\",\n  _s = $RefreshSig$();\n// RecordPresenter.js\nimport { useState } from \"react\";\nimport RecordView from \"../View/RecordView\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RecordPresenter() {\n  _s();\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [chunks, setChunks] = useState([]);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const startRecording = () => {\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      const mediaRecorder = new MediaRecorder(stream);\n      setMediaRecorder(mediaRecorder);\n      mediaRecorder.start();\n      mediaRecorder.ondataavailable = function (e) {\n        chunks.push(e.data);\n      };\n      mediaRecorder.onstop = function () {\n        const blob = new Blob(chunks, {\n          'type': 'audio/ogg; codecs=opus'\n        });\n        setAudioBlob(blob);\n        chunks = [];\n      };\n    });\n  };\n  const stopRecording = () => {\n    if (mediaRecorder) {\n      mediaRecorder.stop();\n      setMediaRecorder(null);\n    }\n  };\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    setAudioBlob(file);\n  };\n  return /*#__PURE__*/_jsxDEV(RecordView, {\n    mediaRecorder: mediaRecorder,\n    startRecording: startRecording,\n    stopRecording: stopRecording,\n    handleFileUpload: handleFileUpload\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(RecordPresenter, \"x17/wtQBSbHXXfN+XfrHEEesNCE=\");\n_c = RecordPresenter;\nvar _c;\n$RefreshReg$(_c, \"RecordPresenter\");","map":{"version":3,"names":["useState","RecordView","jsxDEV","_jsxDEV","RecordPresenter","_s","mediaRecorder","setMediaRecorder","chunks","setChunks","audioBlob","setAudioBlob","startRecording","navigator","mediaDevices","getUserMedia","audio","then","stream","MediaRecorder","start","ondataavailable","e","push","data","onstop","blob","Blob","stopRecording","stop","handleFileUpload","event","file","target","files","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/denipersson/Documents/GitHub/front-end-webapp/src/Presenter/RecordPresenter.tsx"],"sourcesContent":["// RecordPresenter.js\nimport { useState } from \"react\";\nimport RecordView from \"../View/RecordView\";\n\nexport default function RecordPresenter() {\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [chunks, setChunks] = useState([]);\n  const [audioBlob, setAudioBlob] = useState(null);\n\n  const startRecording = () => {\n    navigator.mediaDevices.getUserMedia({ audio: true })\n      .then(stream => {\n        const mediaRecorder = new MediaRecorder(stream);\n        setMediaRecorder(mediaRecorder);\n\n        mediaRecorder.start();\n\n        mediaRecorder.ondataavailable = function(e) {\n          chunks.push(e.data);\n        }\n\n        mediaRecorder.onstop = function() {\n          const blob = new Blob(chunks, {'type' : 'audio/ogg; codecs=opus'});\n          setAudioBlob(blob);\n          chunks = [];\n        }\n      });\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorder) {\n      mediaRecorder.stop();\n      setMediaRecorder(null);\n    }\n  };\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    setAudioBlob(file);\n  };\n\n  return (\n    <RecordView \n      mediaRecorder={mediaRecorder}\n      startRecording={startRecording}\n      stopRecording={stopRecording}\n      handleFileUpload={handleFileUpload}\n    />\n  );\n}"],"mappings":";;AAAA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,UAAU,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,eAAe,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACxC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAMY,cAAc,GAAGA,CAAA,KAAM;IAC3BC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC,CACjDC,IAAI,CAACC,MAAM,IAAI;MACd,MAAMZ,aAAa,GAAG,IAAIa,aAAa,CAACD,MAAM,CAAC;MAC/CX,gBAAgB,CAACD,aAAa,CAAC;MAE/BA,aAAa,CAACc,KAAK,CAAC,CAAC;MAErBd,aAAa,CAACe,eAAe,GAAG,UAASC,CAAC,EAAE;QAC1Cd,MAAM,CAACe,IAAI,CAACD,CAAC,CAACE,IAAI,CAAC;MACrB,CAAC;MAEDlB,aAAa,CAACmB,MAAM,GAAG,YAAW;QAChC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACnB,MAAM,EAAE;UAAC,MAAM,EAAG;QAAwB,CAAC,CAAC;QAClEG,YAAY,CAACe,IAAI,CAAC;QAClBlB,MAAM,GAAG,EAAE;MACb,CAAC;IACH,CAAC,CAAC;EACN,CAAC;EAED,MAAMoB,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAItB,aAAa,EAAE;MACjBA,aAAa,CAACuB,IAAI,CAAC,CAAC;MACpBtB,gBAAgB,CAAC,IAAI,CAAC;IACxB;EACF,CAAC;EAED,MAAMuB,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClCvB,YAAY,CAACqB,IAAI,CAAC;EACpB,CAAC;EAED,oBACE7B,OAAA,CAACF,UAAU;IACTK,aAAa,EAAEA,aAAc;IAC7BM,cAAc,EAAEA,cAAe;IAC/BgB,aAAa,EAAEA,aAAc;IAC7BE,gBAAgB,EAAEA;EAAiB;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEN;AAACjC,EAAA,CA7CuBD,eAAe;AAAAmC,EAAA,GAAfnC,eAAe;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}